When would you want to use a remote repository rather than keeping all your work local?
 - If you are working from another computer
 - If you are stubbing out a new project
 - If you have non-technical user who need to add supporting files like images, text files, etc.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
 - You may be working on changes that are not complete, if someone pushes a commit that affects your code, it could cause
   a big mess.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
 - A fork is a copy of a repository on a remote (like github)
 - A clone is a local copy of a repository
 - A branch is a separate commit stream within a repository
 - I would use a fork when I need to make a copy of someone's repository that I cannot commit to directly
 - I would use a clone when I want a local workarea for a repository.  Most likely because I am actively working on the repository
 - I would use a branch when I have a set of changes that are not ready for distribution, but I would to collaborate on

What is the benefit of having a copy of the last known state of the remote stored locally?
 - Having the last known state of the remote allows the local version of git the ability to reconcile merges or mark when 
   the remote and local repositories have diverged.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
 - Collaborating without a source control/version control system would be more difficult.  At first you would probably share files
   but once two or more programmers started making changes to the same files, it would be very difficult to keep track and 
   reconcile changes.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
 - When you are working with a medium to large team, working with branches is extremely beneficial.  It allows changes to be
   reviewed and tested before going into the master branch.  This is especially true if you are distributing the master branch to
   an external user base.


