Using a tool to diff previous versions is helpful when trying to find errors in your code for the following reasons:
- It shows only the lines of code that changed, which can be extremely helpful when dealing with large files
- It allows you to see the old and new value of a line of code.  This will help if you have a typo.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
- Programming mistakes would be easier to find
- The programmer can experiment with new ways of doing things and then revert back to a previous copy if it does not work
- The programmer can get a previously saved copy if the current file becomes corrupted or is accidentally deleted

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having 
versions automatically saved, like Google docs does?
- Pros:
	- Manually committing leads to more logical commits
	- Manual commits can ensure that all commits compile
        - Allows the programmer to enter a useful description at the time of the commit
- Cons:
	- Subject to user error, the programmer needs to remember to do the commit

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like 
Google Docs, treat each file separately?
- Since Git was written for programming and programs are often modularized, it makes sense to group changes from multiple files
  together.  Otherwise it would be difficult to truly see all the changes for a bug or feature in one commit.
- Since Google Docs is for word processing, it makes more sense to store thing separately since changes are almost always 
  independent between files.

How can you use the commands git log and git diff to view the history of files?
- You can use 'git log' command to view all the commits in a repository.
- You can use 'git diff' to compare two commits to see what changes were made in a particular commit

How might using version control make you more confident to make changes that could break something?
- Knowing that you can easily revert back to a previous commit allows programmers to have a lot more confident when taking 
  risks, knowing that the commit can easily be undone.

Now that you have your workspace set up, what do you want to try using Git for?
- A simple project like my resume HTML page.  This would allow me to start making big changes without having to worry
  about messing it all up, since I will be able to revert back to a previous commit.
