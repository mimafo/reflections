Refections #2

What happens when you initialize a repository? Why do you need to do it?
 - When you initialize your repository with the 'git init' command, it creates a .git directory and allows you to start
   using git for source control on your project.  You need to do it to create the framework/plumbing for git to manage
   code in the directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?
 - The staging area is fundamentally different from the working directory.  It allows you to bundle files and changes 
   together before committing them.  It is important to have a staging area to allow the user to build out a change set before
   committing.

How can you use the staging area to make sure you have one commit per logical change?
- If you are making multiple changes, you can use the staging area as a bookmark or snapshot for a group of changes before they 
  are committed.  It also lets you experiment more without bundling multiple changes together.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- Branches would help if you had different versions of code and wanted to maintain bug fixes in each version (branch).  Each branch would have its own history with a common point. 

How do the diagrams help you visualize the branch structure?
- The git diagrams help you visualize the relationships between the commits.  Since the commit relationships can get 
  complex, a graphical representation can help you understand the relationships better.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- Merging two branches combines all the changes into one branch.  In the diagram it shows as having two parents because it
  combines changes from two different source trees.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
 - The pros are the following:
   - Save you time and effort of merging changes yourself
   - Allows you to keep a development branch up to date
 - The cons are the following:
   - You could be auto merging changes you do not want
   - The auto merged changes and your branch changes by introduce new bugs if they do not mesh together

